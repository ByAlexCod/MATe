<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACBOAAAgTgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaLoxAGi6MQBouzEAaLsxAGi7MQBouzEAaLsxAAAA
        AAAAAAAAAAAAAAAAAABnujAAZ7owAGe6MABouzEAaLsxAGi7MQBouzEAaLsxAGi7MQBnujAAZ7owAGe6
        MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////////wAAAD8AAAAfAAAAHwAA
        AB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAD8AAAB/AAAf/wAAH/8AQB//AGAf/wBgAf8A4AH/AOAB/wDg
        Af8B4AH///////////////////////////8=
</value>
  </data>
</root>